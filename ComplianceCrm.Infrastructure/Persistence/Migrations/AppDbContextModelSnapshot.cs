// <auto-generated />
using System;
using ComplianceCrm.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace ComplianceCrm.Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("crm")
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ComplianceCrm.Domain.Audit.BusinessAuditLog", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("Action")
                        .HasColumnType("integer")
                        .HasColumnName("action");

                    b.Property<Guid>("CorrelationId")
                        .HasColumnType("uuid")
                        .HasColumnName("correlation_id");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("timestamptz")
                        .HasColumnName("created_at_utc");

                    b.Property<long?>("CreatedByUserId")
                        .HasColumnType("bigint")
                        .HasColumnName("created_by_user_id");

                    b.Property<string>("IpAddress")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("ip_address");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("notes");

                    b.Property<long>("TargetId")
                        .HasColumnType("bigint")
                        .HasColumnName("target_id");

                    b.Property<int>("TargetType")
                        .HasColumnType("integer")
                        .HasColumnName("target_type");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("tenant_id");

                    b.Property<DateTime?>("UpdatedAtUtc")
                        .HasColumnType("timestamptz")
                        .HasColumnName("updated_at_utc");

                    b.Property<long?>("UpdatedByUserId")
                        .HasColumnType("bigint")
                        .HasColumnName("updated_by_user_id");

                    b.HasKey("Id")
                        .HasName("pk_business_audit_logs");

                    b.HasIndex("TenantId", "TargetType", "TargetId", "Action", "CreatedAtUtc")
                        .HasDatabaseName("ix_business_audit_logs_tenant_id_target_type_target_id_action_");

                    b.ToTable("business_audit_logs", "crm");
                });

            modelBuilder.Entity("ComplianceCrm.Domain.Customers.Customer", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("ConsentDateUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("consent_date_utc");

                    b.Property<bool>("Consented")
                        .HasColumnType("boolean")
                        .HasColumnName("consented");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("timestamptz")
                        .HasColumnName("created_at_utc");

                    b.Property<long?>("CreatedByUserId")
                        .HasColumnType("bigint")
                        .HasColumnName("created_by_user_id");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("email");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("name");

                    b.Property<string>("Phone")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("phone");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("tenant_id");

                    b.Property<DateTime?>("UpdatedAtUtc")
                        .HasColumnType("timestamptz")
                        .HasColumnName("updated_at_utc");

                    b.Property<long?>("UpdatedByUserId")
                        .HasColumnType("bigint")
                        .HasColumnName("updated_by_user_id");

                    b.HasKey("Id")
                        .HasName("pk_customers");

                    b.HasIndex("TenantId", "Email")
                        .HasDatabaseName("ix_customers_tenant_id_email");

                    b.ToTable("customers", "crm");
                });

            modelBuilder.Entity("ComplianceCrm.Domain.Customers.Task", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("CompletedAtUtc")
                        .HasColumnType("timestamptz")
                        .HasColumnName("completed_at_utc");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("timestamptz")
                        .HasColumnName("created_at_utc");

                    b.Property<long?>("CreatedByUserId")
                        .HasColumnType("bigint")
                        .HasColumnName("created_by_user_id");

                    b.Property<long>("CustomerId")
                        .HasColumnType("bigint")
                        .HasColumnName("customer_id");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<DateTime>("DueDateUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("due_date_utc");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("tenant_id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("title");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.Property<DateTime?>("UpdatedAtUtc")
                        .HasColumnType("timestamptz")
                        .HasColumnName("updated_at_utc");

                    b.Property<long?>("UpdatedByUserId")
                        .HasColumnType("bigint")
                        .HasColumnName("updated_by_user_id");

                    b.HasKey("Id")
                        .HasName("pk_customer_tasks");

                    b.HasIndex("CustomerId")
                        .HasDatabaseName("ix_customer_tasks_customer_id");

                    b.HasIndex("TenantId", "DueDateUtc")
                        .HasDatabaseName("ix_customer_tasks_tenant_id_due_date_utc");

                    b.ToTable("customer_tasks", "crm");
                });

            modelBuilder.Entity("ComplianceCrm.Domain.Documents.Document", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("content_type");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("timestamptz")
                        .HasColumnName("created_at_utc");

                    b.Property<long?>("CreatedByUserId")
                        .HasColumnType("bigint")
                        .HasColumnName("created_by_user_id");

                    b.Property<long>("CustomerId")
                        .HasColumnType("bigint")
                        .HasColumnName("customer_id");

                    b.Property<bool>("IsPersonalData")
                        .HasColumnType("boolean")
                        .HasColumnName("is_personal_data");

                    b.Property<bool>("LegalHold")
                        .HasColumnType("boolean")
                        .HasColumnName("legal_hold");

                    b.Property<string>("OriginalFileName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("original_file_name");

                    b.Property<int>("Provider")
                        .HasColumnType("integer")
                        .HasColumnName("provider");

                    b.Property<DateTime?>("RetentionUntilUtc")
                        .HasColumnType("timestamptz")
                        .HasColumnName("retention_until_utc");

                    b.Property<int>("Sensitivity")
                        .HasColumnType("integer")
                        .HasColumnName("sensitivity");

                    b.Property<string>("Sha256")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("sha256");

                    b.Property<long>("SizeBytes")
                        .HasColumnType("bigint")
                        .HasColumnName("size_bytes");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<string>("StoragePath")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("storage_path");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("tenant_id");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.Property<DateTime?>("UpdatedAtUtc")
                        .HasColumnType("timestamptz")
                        .HasColumnName("updated_at_utc");

                    b.Property<long?>("UpdatedByUserId")
                        .HasColumnType("bigint")
                        .HasColumnName("updated_by_user_id");

                    b.Property<int>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.HasKey("Id")
                        .HasName("pk_documents");

                    b.HasIndex("CustomerId")
                        .HasDatabaseName("ix_documents_customer_id");

                    b.HasIndex("TenantId", "Sha256")
                        .HasDatabaseName("ix_documents_tenant_id_sha256");

                    b.HasIndex("TenantId", "CustomerId", "CreatedAtUtc")
                        .HasDatabaseName("ix_documents_tenant_id_customer_id_created_at_utc");

                    b.ToTable("documents", "crm");
                });

            modelBuilder.Entity("ComplianceCrm.Domain.Tenants.Tenant", b =>
                {
                    b.Property<Guid>("TenantId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("tenant_id");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("code");

                    b.Property<string>("ContactEmail")
                        .HasColumnType("text")
                        .HasColumnName("contact_email");

                    b.Property<string>("ContactPhone")
                        .HasColumnType("text")
                        .HasColumnName("contact_phone");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("timestamptz")
                        .HasColumnName("created_at_utc");

                    b.Property<long?>("CreatedByUserId")
                        .HasColumnType("bigint")
                        .HasColumnName("created_by_user_id");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UpdatedAtUtc")
                        .HasColumnType("timestamptz")
                        .HasColumnName("updated_at_utc");

                    b.Property<long?>("UpdatedByUserId")
                        .HasColumnType("bigint")
                        .HasColumnName("updated_by_user_id");

                    b.HasKey("TenantId")
                        .HasName("pk_tenants");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasDatabaseName("ix_tenants_code");

                    b.ToTable("tenants", "crm");
                });

            modelBuilder.Entity("ComplianceCrm.Domain.Customers.Task", b =>
                {
                    b.HasOne("ComplianceCrm.Domain.Customers.Customer", "Customer")
                        .WithMany("Tasks")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_customer_tasks_customers_customer_id");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("ComplianceCrm.Domain.Documents.Document", b =>
                {
                    b.HasOne("ComplianceCrm.Domain.Customers.Customer", "Customer")
                        .WithMany("Documents")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_documents_customers_customer_id");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("ComplianceCrm.Domain.Customers.Customer", b =>
                {
                    b.Navigation("Documents");

                    b.Navigation("Tasks");
                });
#pragma warning restore 612, 618
        }
    }
}
